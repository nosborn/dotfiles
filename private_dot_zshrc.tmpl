setopt HIST_FCNTL_LOCK
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_REDUCE_BLANKS
setopt PROMPT_SP
setopt PROMPT_SUBST
setopt SHARE_HISTORY

export HISTORY_IGNORE='(bg|cd *|exit|fg|pwd)'

# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
bindkey -e
# zstyle :compinstall filename ~/.zshrc

autoload -Uz compinit && compinit
autoload -Uz +X bashcompinit && bashcompinit

{{ if .github.user -}}
cdpath=( "${HOME}/src/github.com/{{ .github.user }}" $cdpath )
{{ end -}}
{{ if .work -}}
cdpath=( ~ ~/src/github.com/corda $cdpath )
{{ end -}}
cdpath=( . $cdpath )
fpath=( /usr/local/share/zsh-completions $fpath )
path=( ~/bin /usr/local/sbin $path )

autoload -U colors
colors

for config_file (~/.zsh/lib/*.zsh); do
  # echo source $config_file
  source $config_file
done

if [[ -z "${SSH_CLIENT}" ]]; then
  prompt_host=''
else
  prompt_host='%m '
fi
export PROMPT='$(abbreviated_path)%# '
export PROMPT_EOL_MARK="%F{1}$(echo "\u23CE")%f"

if [ -e $(brew --prefix zsh-git-prompt)/zshrc.sh ]; then
  source $(brew --prefix zsh-git-prompt)/zshrc.sh
  ZSH_THEME_GIT_PROMPT_PREFIX="["
  ZSH_THEME_GIT_PROMPT_SUFFIX="]"
  ZSH_THEME_GIT_PROMPT_SEPARATOR="|"
  export RPROMPT='$(git_super_status)'
else
  autoload -Uz vcs_info
  zstyle ':vcs_info:*' enable git

  zstyle ':vcs_info:*' stagedstr '%F{green}●%f '
  zstyle ':vcs_info:*' unstagedstr '%F{yellow}●%f '
  zstyle ':vcs_info:git:*' check-for-changes true
  zstyle ':vcs_info:git:*' formats "%F{blue}%b%f %u%c"
  ##zstyle ':vcs_info:*' formats "[%b]%u%c-"

  precmd_functions+=( vcs_info )
  export RPROMPT='${vcs_info_msg_0_}'
fi

function vpn_info() {
  if [[ -e /opt/cisco/anyconnect/bin/vpn ]]; then
    local state=$(/opt/cisco/anyconnect/bin/vpn state | grep -F '>> state:' | tail -1 | awk '{print $4}')
    case "${state}" in
      Connected|Connecting) vpn_info_msg_0_="[%F{blue}VPN%f]";;
      Disconnected) vpn_info_msg_0_="";;
      *) vpn_info_msg_0_="[%F{yellow}VPN:${state}%f]";;
    esac
  else
    vpn_info_msg_0_=""
  fi
}
precmd_functions+=( vpn_info )
RPROMPT+='${vpn_info_msg_0_}'

export CLICOLOR=1
export EDITOR='vim'
export VISUAL='vim'

if (( $+commands[lesspipe.sh] )); then
  export LESSOPEN="|$commands[lesspipe.sh] %s"
  export LESS_ADVANCED_PREPROCESSOR=1
fi

alias diff='command diff -W${COLUMNS} -x .terraform -d'
alias sdiff='command sdiff -d -w${COLUMNS}'
alias tfdiff='command diff -dNry -W${COLUMNS} -x .terraform -x \*.rules.tf -x \*.tfstate -x \*.tfstate.\*'
alias tfdiffs='tfdiff --suppress-common-lines'
alias vi='vim'

avdiff() {
  [[ $# -eq 2 ]] || { echo "Usage: $0 FILENAME FILENAME" >&2; exit 1 }
  command diff -dy -W${COLUMNS} =(ansible-vault view "$1") =(ansible-vault view "$2")
}

avdiffs() {
  [[ $# -eq 2 ]] || { echo "Usage: $0 FILENAME FILENAME" >&2; exit 1 }
  command diff -dy -W${COLUMNS} --suppress-common-lines =(ansible-vault view "$1") =(ansible-vault view "$2")
}

if (( $+commands[terraform] )); then
  complete -o nospace -C $commands[terraform] terraform
fi

comp_files=()
comp_files+=(/usr/local/etc/bash_completion.d/az)
comp_files+=(/usr/local/etc/bash_completion.d/npm)
#comp_files+=(/usr/local/etc/bash_completion.d/rg.bash)
#comp_files+=(/usr/local/etc/bash_completion.d/vagrant)

for f in $comp_files; do
  if [[ -f "$f" ]]; then
    source "$f"
  fi
done

source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
eval $(/usr/local/bin/qpdf --completion-zsh)

# for config_file (~/.zsh/lib/*.zsh); do
#   # echo source $config_file
#   source $config_file
# done

if [[ "${TERM_PROGRAM}" = Apple_Terminal ]] && [[ -z "${INSIDE_EMACS}" ]]; then
  _update_terminal_cwd() {
    local url_path=''
    {
      local LC_CTYPE=C LC_ALL= byte i ord
      for ((i = 0; i < ${#PWD}; ++i)); do
        byte="${PWD[i]}"
        if [[ "${byte}" =~ [/._~A-Za-z0-9-] ]]; then
          url_path+="${byte}"
        else
          ord=$(([#16] #byte))
          url_path+="%${ord}"
        fi
      done
    }
    printf '\e]7;%s\a' "file://${HOST:?}${url_path}"
  }
  typeset -ag chpwd_functions
  if [[ -z ${chpwd_functions[(r)_update_terminal_cwd]} ]]; then
    chpwd_functions+=_update_terminal_cwd
  fi
  _update_terminal_cwd
fi

if (( $+commands[direnv] )); then
  eval "$(direnv hook zsh)"
fi

# vim: ft=zsh
