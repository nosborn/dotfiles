set encoding=UTF-8
scriptencoding utf-8

filetype plugin indent on
syntax enable

set autoindent
set autoread
set background=dark
set backspace=indent,eol,start
set belloff=all
set complete-=i
set display+=lastline
set display+=truncate
set formatoptions+=j
set history=1000
set hlsearch
set incsearch
set ignorecase
set laststatus=2
set list
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
set mouse=a
set nolangremap
set noshowmode
set nostartofline
set noswapfile
set nowrap
set nrformats-=octal
set number
set ruler
set scrolloff=2
set sessionoptions-=options
set showcmd
set showmatch
set sidescroll=1
set sidescrolloff=5
set signcolumn=yes
set smarttab
set spelllang=en_gb
set tabpagemax=50
set termguicolors
set ttimeout
set ttimeoutlen=100
set ttyfast
set updatetime=100
set viewoptions-=options
set viminfo-=!
set wildmenu
set wildoptions=pum

if executable('rg')
  set grepformat=%f:%l:%c:%m,%f:%l:%m
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
endif


let g:ale_fix_on_save = 1
let g:ale_fixers = {
      \   'javascript': ['eslint'],
      \   'json': ['jq'],
      \   'python': ['black'],
      \   'river': ['alloy'],
      \   'sh': ['shfmt'],
      \   'terraform': ['terraform'],
      \   'toml': ['prettier'],
      \   'xml': ['xmllint'],
      \   'zsh': ['shfmt'],
      \   '*': ['remove_trailing_lines', 'trim_whitespace']
      \ }
let g:ale_json_jq_options = '-S'
let g:ale_set_balloons = 1
let g:ale_sh_shfmt_options = '-i 2 -ci'
let g:ale_sign_column_always = 1
let g:ale_sign_error = ''
let g:ale_sign_info = ''
" let g:ale_sign_priority = 10
let g:ale_sign_warning = ''
let b:ale_xml_xmllint_optons = '--nonet'

nmap [D :ALEFirst<CR>
nmap ]D :ALELast<CR>
nmap [d :ALEPreviousWrap<CR>
nmap ]d :ALENextWrap<CR>

let g:ansible_extra_keywords_highlight = 1
let g:ansible_name_highlight = 'd'
let g:ansible_template_syntaxes = {
  \   '*.conf.j2':      'conf',
  \   '*.ini.j2':       'dosini',
  \   '*.json.j2':      'json',
  \   '*.php.j2':       'php',
  \   '*.sh.j2':        'sh',
  \   '*.yaml.j2':      'yaml',
  \   '*.yml.j2':       'yaml',
  \   'Dockerfile.j2':  'dockerfile',
  \   'my.cnf.j2':      'dosini',
  \   'named.conf.j2':  'named',
  \   'nginx.conf.j2':  'nginx',
  \   'smb.conf.j2':    'dosini',
  \   'sshd_config.j2': 'sshdconfig',
  \ }
let g:ansible_unindent_after_newline = 1

let g:bash_is_sh = 1

let g:is_posix = 1 " modified

let g:gitgutter_map_keys = 0
" let g:gitgutter_preview_win_floating = 1
" let g:gitgutter_set_sign_backgrounds = 1
let g:gitgutter_sign_added = '┃'
let g:gitgutter_sign_modified = '┃'
" let g:gitgutter_sign_modified_removed = '~'
let g:gitgutter_sign_removed = '▁'
" let g:gitgutter_sign_removed_above_and_below = '{'
let g:gitgutter_sign_removed_first_line = '▔'

" let g:gitgutter_sign_priority = 9

nmap ]c <Plug>(GitGutterNextHunk)
nmap [c <Plug>(GitGutterPrevHunk)

let g:lightline = {
      \   'active': {
      \     'left': [
      \       ['mode', 'paste'],
      \       ['gitbranch', 'githunks', 'readonly', 'filename', 'modified'],
      \     ],
      \     'right': [
      \       ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok'],
      \       ['lineinfo'],
      \       ['percent'],
      \       ['fileformat', 'fileencoding', 'filetype'],
      \     ]
      \   },
      \   'colorscheme': 'tokyonight_night',
      \   'component_function': {
      \     'gitbranch': 'lightline#custom#gitbranch',
      \     'githunks': 'lightline#custom#githunks',
      \     'readonly': 'lightline#custom#readonly',
      \   },
      \   'subseparator': {
      \     'left': '│',
      \     'right': '│',
      \   }
      \ }
let g:lightline.component_expand = {
      \   'linter_checking': 'lightline#ale#checking',
      \   'linter_errors': 'lightline#ale#errors',
      \   'linter_infos': 'lightline#ale#infos',
      \   'linter_ok': 'lightline#ale#ok',
      \   'linter_warnings': 'lightline#ale#warnings',
      \ }
let g:lightline.component_type = {
      \   'linter_checking': 'right',
      \   'linter_errors': 'error',
      \   'linter_infos': 'right',
      \   'linter_ok': 'right',
      \   'linter_warnings': 'warning',
      \ }
let g:lightline#ale#indicator_checking = '⋯' " "\uf110"
let g:lightline#ale#indicator_ok = '✓'

let g:markdown_fenced_languages = [
      \   'bash=sh',
      \   'gitconfig',
      \   'json',
      \   'sh',
      \   'terraform',
      \   'yaml',
      \   'zsh=sh',
      \ ]
let g:markdown_syntax_conceal = 0

let g:netrw_banner = 0

let g:vim_json_conceal = 0

let g:vim_markdown_conceal = 0
let g:vim_markdown_folding_disabled = 1

colorscheme tokyonight-night

if $TERM ==# 'xterm-ghostty'
  let &t_Cs = "\e[4:3m"
  let &t_Ce = "\e[4:0m"
  highlight SpellBad cterm=undercurl term=underline
else
  highlight SpellBad cterm=underline term=underline
endif

if executable('ansible-vault')
  function AnsibleVaultDecrypt()
    let s:header = split(getline(1), ';')
    let b:ansible_vault_id = len(s:header) > 3 ? s:header[3] : 'default'
    silent %!ansible-vault decrypt
  endfunction

  function AnsibleVaultEncrypt()
    execute 'silent %!ansible-vault encrypt --encrypt-vault-id='.b:ansible_vault_id
  endfunction

  augroup ansible-vault
    autocmd!
    autocmd BufReadPre,FileReadPre */ansible/**/vault.yml setlocal nobackup noswapfile noundofile viminfo=
    autocmd BufReadPre,FileReadPre */group_vars/*/vault.yml setlocal nobackup noswapfile noundofile viminfo=
    autocmd BufReadPre,FileReadPre */host_vars/*/vault.yml setlocal nobackup noswapfile noundofile viminfo=
    autocmd BufReadPre,FileReadPre */vars/vault.yml setlocal nobackup noswapfile noundofile viminfo=
    autocmd BufReadPost,FileReadPost */group_vars/*/vault.yml call AnsibleVaultDecrypt()
    autocmd BufReadPost,FileReadPost */host_vars/*/vault.yml call AnsibleVaultDecrypt()
    autocmd BufReadPost,FileReadPost */vars/vault.yml call AnsibleVaultDecrypt()
    autocmd BufWritePre,FileWritePre */group_vars/*/vault.yml call AnsibleVaultEncrypt()
    autocmd BufWritePre,FileWritePre */host_vars/*/vault.yml call AnsibleVaultEncrypt()
    autocmd BufWritePre,FileWritePre */vars/vault.yml call AnsibleVaultEncrypt()
    autocmd BufWritePost,FileWritePost */ansible/**/vault.yml silent undo
    autocmd BufWritePost,FileWritePost */group_vars/*/vault.yml silent undo
    autocmd BufWritePost,FileWritePost */host_vars/*/vault.yml silent undo
    autocmd BufWritePost,FileWritePost */vars/vault.yml silent undo
  augroup END
endif
