#!/bin/bash
#
# Originally part of vpnc source code:
# © 2005-2012 Maurice Massar, Jörg Mayer, Antonio Borneo et al.
# © 2009-2012 David Woodhouse <dwmw2@infradead.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
################
#
# List of parameters passed through environment
#* reason                       -- why this script was called, one of: pre-init connect disconnect reconnect attempt-reconnect
#* VPNGATEWAY                   -- vpn gateway address (always present)
#* TUNDEV                       -- tunnel device (always present)
#* INTERNAL_IP4_ADDRESS         -- address (always present)
#* INTERNAL_IP4_MTU             -- mtu (often unset)
#* INTERNAL_IP4_NETMASK         -- netmask (often unset)
#* INTERNAL_IP4_NETMASKLEN      -- netmask length (often unset)
#* INTERNAL_IP4_NETADDR         -- address of network (only present if netmask is set)
#* INTERNAL_IP4_DNS             -- list of dns servers
#* INTERNAL_IP4_NBNS            -- list of wins servers
#* INTERNAL_IP6_ADDRESS         -- IPv6 address
#* INTERNAL_IP6_NETMASK         -- IPv6 netmask
#* INTERNAL_IP6_DNS             -- IPv6 list of dns servers
#* CISCO_DEF_DOMAIN             -- default domain name
#* CISCO_BANNER                 -- banner from server
#* CISCO_SPLIT_INC              -- number of networks in split-network-list
#* CISCO_SPLIT_INC_%d_ADDR      -- network address
#* CISCO_SPLIT_INC_%d_MASK      -- subnet mask (for example: 255.255.255.0)
#* CISCO_SPLIT_INC_%d_MASKLEN   -- subnet masklen (for example: 24)
#* CISCO_SPLIT_INC_%d_PROTOCOL  -- protocol (often just 0)
#* CISCO_SPLIT_INC_%d_SPORT     -- source port (often just 0)
#* CISCO_SPLIT_INC_%d_DPORT     -- destination port (often just 0)
#* CISCO_IPV6_SPLIT_INC         -- number of networks in IPv6 split-network-list
#* CISCO_IPV6_SPLIT_INC_%d_ADDR -- IPv6 network address
#* CISCO_IPV6_SPLIT_INC_$%d_MASKLEN -- IPv6 subnet masklen

#env | sort
#set -x

# =========== script (variable) setup ====================================

PATH=/sbin:/usr/sbin:$PATH

readonly HOOKS_DIR="${HOME}/.local/etc/vpnc"

# some systems, eg. Darwin & FreeBSD, prune /var/run on boot
if [[ ! -d /var/run/vpnc ]]; then
  mkdir -p /var/run/vpnc
fi

# =========== script hooks =================================================

run_hooks() {
  local HOOK="$1"

  if [[ -d "${HOOKS_DIR}/${HOOK}.d" ]]; then
    for script in "${HOOKS_DIR}/${HOOK}.d"/*; do
      # shellcheck disable=SC1090
      [[ -f "${script}" ]] && . "${script}"
    done
  fi
}

# =========== tunnel interface handling ====================================

do_ifconfig() {
  local MTU="${INTERNAL_IP4_MTU:-1412}"

  # Point to point interface require a netmask of 255.255.255.255 on some
  # systems.
  ifconfig "${TUNDEV}" inet "${INTERNAL_IP4_ADDRESS}" "${INTERNAL_IP4_ADDRESS}" netmask 255.255.255.255 mtu ${MTU} up

  # shellcheck disable=SC2153
  if [[ -n "${INTERNAL_IP4_NETMASK}" ]]; then
    set_network_route "${INTERNAL_IP4_NETADDR}" "${INTERNAL_IP4_NETMASK}" "${INTERNAL_IP4_NETMASKLEN}" "${TUNDEV}"
  fi

  # If the netmask is provided, it contains the address _and_ netmask.
  if [[ -n "${INTERNAL_IP6_ADDRESS}" ]] && [[ -z "${INTERNAL_IP6_NETMASK}" ]]; then
    INTERNAL_IP6_NETMASK="${INTERNAL_IP6_ADDRESS}/128"
  fi

  if [[ -n "${INTERNAL_IP6_NETMASK}" ]]; then
    # Unlike for Legacy IP, we don't specify the dest_address here on *BSD.
    # OpenBSD for one will refuse to accept incoming packets to that address if
    # we do. OpenVPN does the same (gives dest_address for Legacy IP but not
    # for IPv6).
    ifconfig "${TUNDEV}" inet6 "${INTERNAL_IP6_NETMASK}" mtu "${MTU}" up
  fi
}

destroy_tun_device() {
  :
}

# =========== route handling ====================================

get_default_gw() {
  netstat -r -n -f inet | awk '$1=="default" {print $2}'
}

set_network_route() {
  local NETWORK="$1"
  local NETMASK="$2"
  local NETMASKLEN="$3"
  local NETGW="${5:-${INTERNAL_IP4_ADDRESS}}"

  route -n add -net "${NETWORK}" -netmask "${NETMASK}" "${NETGW}"
}

# =========== resolv.conf handling ====================================

# =========== resolv.conf handling for any OS =========================

modify_resolvconf_generic() {
  scutil >/dev/null 2>&1 <<EOF
open
d.init
d.add ServerAddresses * ${INTERNAL_IP4_DNS}
set State:/Network/Service/${TUNDEV}/DNS
d.init
d.add OverridePrimary # 1
d.add Addresses * ${INTERNAL_IP4_ADDRESS}
d.add SubnetMasks * 255.255.255.255
d.add InterfaceName ${TUNDEV}
d.add OverridePrimary # 1
set State:/Network/Service/${TUNDEV}/IPv4
close
EOF

  if [ -n "${CISCO_DEF_DOMAIN}" ]; then
    scutil >/dev/null 2>&1 <<EOF
open
get State:/Network/Service/${TUNDEV}/DNS
d.add DomainName ${CISCO_DEF_DOMAIN}
d.add SearchDomains * ${CISCO_DEF_DOMAIN}
d.add SupplementalMatchDomains * ${CISCO_DEF_DOMAIN}
set State:/Network/Service/${TUNDEV}/DNS
close
EOF
  fi
}

restore_resolvconf_generic() {
  scutil >/dev/null 2>&1 <<EOF
open
remove State:/Network/Service/${TUNDEV}/IPv4
remove State:/Network/Service/${TUNDEV}/DNS
close
EOF
}

# ========= Toplevel state handling  =======================================

do_pre_init() {
  :
}

do_connect() {
  if [ -n "${CISCO_BANNER}" ]; then
    echo 'Connect Banner:'
    printf '%s' "${CISCO_BANNER}" | while read -r LINE; do
      printf '| %s\n' "${LINE}"
    done
    echo
  fi

  route -n add -host "${VPNGATEWAY}" "$(get_default_gw)"
  do_ifconfig

  if [ -n "${INTERNAL_IP4_ADDRESS}" ]; then
    route -nv add -net 0/1 "${INTERNAL_IP4_ADDRESS}"
    route -nv add -net 128/1 "${INTERNAL_IP4_ADDRESS}"
  fi

  if [ -n "${INTERNAL_IP4_DNS}" ]; then
    modify_resolvconf_generic
  fi

  if [ -n "${INTERNAL_IP6_NETMASK}" ] || [ -n "${INTERNAL_IP6_ADDRESS}" ]; then
    route add -inet6 default "${INTERNAL_IP6_ADDRESS}"
  fi
}

do_disconnect() {
  if [[ -n "${INTERNAL_IP6_NETMASK}" ]] || [[ -n "${INTERNAL_IP6_ADDRESS}" ]]; then
    route -n delete -inet6 default "${INTERNAL_IP6_ADDRESS}"
  fi

  route -n delete -net 128/1 "${INTERNAL_IP4_ADDRESS}"
  route -n delete -net 0/1 "${INTERNAL_IP4_ADDRESS}"

  route -n delete -host "${VPNGATEWAY}"

  if [[ -n "${INTERNAL_IP4_DNS}" ]]; then
    restore_resolvconf_generic
  fi

  if [[ -n "${INTERNAL_IP4_ADDRESS}" ]]; then
    ifconfig "${TUNDEV}" 0.0.0.0
  fi

  if [ -n "${INTERNAL_IP6_ADDRESS}" ] && [ -z "${INTERNAL_IP6_NETMASK}" ]; then
    INTERNAL_IP6_NETMASK="${INTERNAL_IP6_ADDRESS}/128"
  fi

  if [[ -n "${INTERNAL_IP6_NETMASK}" ]]; then
    ifconfig "${TUNDEV}" inet6 del "${INTERNAL_IP6_NETMASK}"
  fi

  destroy_tun_device
}

main() {
  # shellcheck disable=SC2154
  if [ -z "${reason}" ]; then
    echo "this script must be called from vpnc" 1>&2
    exit 1
  fi

  case "${reason}" in
    pre-init)
      run_hooks pre-init
      do_pre_init
      ;;
    connect)
      run_hooks connect
      do_connect
      run_hooks post-connect
      ;;
    disconnect)
      run_hooks disconnect
      do_disconnect
      run_hooks post-disconnect
      ;;
    attempt-reconnect)
      # Invoked before each attempt to re-establish the session. If the
      # underlying physical connection changed, we might be left with a route to
      # the VPN server through the VPN itself, which would need to be fixed.
      run_hooks attempt-reconnect
      ;;
    reconnect)
      # After successfully re-establishing the session.
      run_hooks reconnect
      ;;
    *)
      echo "unknown reason '${reason}'. Maybe vpnc-script is out of date" >&2
      exit 1
      ;;
  esac
}

main
exit 0
