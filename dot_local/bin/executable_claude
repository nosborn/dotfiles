#!/bin/bash
set -euo pipefail

readonly GCS_BUCKET=https://storage.googleapis.com/claude-code-dist-86c565f3-f756-42ad-8dfa-d59b1c096819/claude-code-releases

claude_version="$(curl -fsS "${GCS_BUCKET}/stable")"
readonly claude_version

if [[ -z "$(docker image ls --quiet "claude-code:${claude_version}")" ]]; then
  golangci_lint_version="$(golangci-lint version --short)"
  readonly golangci_lint_version

  builddir="$(mktemp -d)"
  trap 'rm -rf "${builddir}"' EXIT

  cat >"${builddir}/entrypoint.sh" <<EOT
#!/bin/bash
prompt="\$(mktemp)"
cat >"\${prompt}" <<_EOT
You are a senior Go programmer working with Go 1.25. Support Darwin (arm64) and Linux (arm64/amd64) targets. You are running in a Docker container environment.
_EOT
PATH="${HOME}/.local/bin:${PATH}"
exec "${HOME}/.local/bin/claude" --append-system-prompt "\$(<"\${prompt}")" "$@"
EOT

  cat >"${builddir}/Dockerfile" <<EOT
FROM golang:$(go env GOVERSION | sed 's/^go//')
RUN export DEBIAN_FRONTEND=noninteractive \
  && apt-get -y update \
  && apt-get -y install --no-install-recommends autoconf automake gh git-crypt jq libtool ripgrep sqlite3 unzip yq \
  && rm -rf /var/lib/apt/lists/* \
  && curl -fLsS -o golangci-lint.deb \
       https://github.com/golangci/golangci-lint/releases/download/v${golangci_lint_version}/golangci-lint-${golangci_lint_version}-linux-arm64.deb \
  && dpkg -i golangci-lint.deb \
  && rm golangci-lint.deb \
  && useradd -d '${HOME}' -g '$(id -g)' -M -N -u '$(id -u)' '$(id -un)' \
  && mkdir -p "${HOME}/.local/bin" \
  && chown "$(id -u):$(id -g)" "${HOME}" "${HOME}/.local" "${HOME}/.local/bin" \
  && curl -fsS -o "${HOME}/.local/bin/claude" "${GCS_BUCKET}/${claude_version}/linux-arm64/claude" \
  && chmod 0555 "${HOME}/.local/bin/claude" \
  && chown "$(id -u):$(id -g)" "${HOME}/.local/bin/claude"
COPY --chmod=0555 entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/entrypoint.sh"]
USER $(id -u):$(id -g)
EOT

  docker build \
    --file "${builddir}/Dockerfile" \
    --platform linux/arm64 \
    --tag "claude-code:${claude_version}" \
    --tag "claude-code:latest" \
    "${builddir}"
fi

GOCACHE="$(go env GOCACHE)"
GOPATH="$(go env GOPATH)"

# Check for additional directories to mount from local settings
additional_mounts=()
if [[ -f ".claude/settings.local.json" ]]; then
  while IFS= read -r dir; do
    if [[ -n "${dir}" && -d "${dir}" ]]; then
      additional_mounts+=("--mount" "type=bind,source=${dir},target=${dir}")
    fi
  done < <(jq -r '.permissions.additionalDirectories[]? // empty' ".claude/settings.local.json" 2>/dev/null)
fi

docker run \
  --env "CGO_ENABLED=0" \
  --env "DISABLE_AUTOUPDATER=1" \
  --env "HOME=${HOME}" \
  --env "GOCACHE=${GOCACHE}" \
  --env "GOPATH=${GOPATH}" \
  --env "GOPROXY=$(go env GOPROXY)" \
  --env "GOSUMDB=$(go env GOSUMDB)" \
  --env "GOTELEMETRY=off" \
  --env "TERM=xterm-256color" \
  --hostname "$(hostname)" \
  --init \
  --mount "type=bind,source=${HOME}/.claude,target=${HOME}/.claude" \
  --mount "type=bind,source=${HOME}/.claude.json,target=${HOME}/.claude.json" \
  --mount "type=bind,source=${HOME}/.config/git,target=${HOME}/.config/git,readonly" \
  --mount "type=bind,source=${GOCACHE},target=${GOCACHE}" \
  --mount "type=bind,source=${GOPATH},target=${GOPATH}" \
  --mount "type=bind,source=${PWD},target=${PWD}" \
  "${additional_mounts[@]+"${additional_mounts[@]}"}" \
  --interactive \
  --platform linux/arm64 \
  --rm \
  --tmpfs "${HOME}/.cache" \
  --tmpfs "/tmp:rw,exec" \
  --tty \
  --workdir "${PWD}" \
  "claude-code:${claude_version}" \
  "$@"
