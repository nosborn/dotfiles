# vim:fileencoding=utf-8:foldmethod=marker

font_family Input Mono
# bold_font        auto
# italic_font      auto
# bold_italic_font auto

font_size 18.0

# force_ltr no

# adjust_line_height  0
# adjust_column_width 0

# adjust_baseline 0

# symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols

# disable_ligatures never

# font_features none

# box_drawing_scale 0.001, 1, 1.5, 2

# cursor #cccccc
# cursor_text_color #111111
# cursor_shape block
# cursor_beam_thickness 1.5
# cursor_underline_thickness 2.0
cursor_blink_interval 0.5
# cursor_stop_blinking_after 15.0

# scrollback_lines 2000
# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER
scrollback_pager_history_size 10000
scrollback_fill_enlarged_window yes

# wheel_scroll_multiplier 5.0
# touch_scroll_multiplier 1.0

# mouse_hide_wait 3.0

# url_color #0087bd
url_style curly

# open_url_with default
# detect_urls yes
# url_excluded_characters

# copy_on_select no
strip_trailing_spaces smart
# select_by_word_characters @-./_~?&=%+#

# click_interval -1.0

# focus_follows_mouse no

# pointer_shape_when_grabbed arrow

# default_pointer_shape beam

# pointer_shape_when_dragging beam

# clear_all_mouse_actions no

# mouse_map left            click ungrabbed mouse_click_url_or_select
# mouse_map shift+left      click grabbed,ungrabbed mouse_click_url_or_select
# mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_click_url

# mouse_map ctrl+shift+left press grabbed discard_event

# mouse_map middle        release ungrabbed paste_from_selection
# mouse_map left          press ungrabbed mouse_selection normal
# mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle
# mouse_map left          doublepress ungrabbed mouse_selection word
# mouse_map left          triplepress ungrabbed mouse_selection line

# mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point

# mouse_map right press ungrabbed mouse_selection extend

# mouse_map shift+middle        release ungrabbed,grabbed paste_selection
# mouse_map shift+left          press ungrabbed,grabbed mouse_selection normal
# mouse_map shift+ctrl+alt+left press ungrabbed,grabbed mouse_selection rectangle
# mouse_map shift+left          doublepress ungrabbed,grabbed mouse_selection word
# mouse_map shift+left          triplepress ungrabbed,grabbed mouse_selection line

# mouse_map shift+ctrl+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point

# mouse_map shift+right press ungrabbed,grabbed mouse_selection extend

# repaint_delay 10

# input_delay 3

# sync_to_monitor yes

enable_audio_bell no
# visual_bell_duration 0.0
# window_alert_on_bell yes
# bell_on_tab yes
# command_on_bell none

remember_window_size no
initial_window_width 88c
initial_window_height 44c

# enabled_layouts *

# window_resize_step_cells 2
# window_resize_step_lines 2

# window_border_width 0.5pt

# draw_minimal_borders yes

# window_margin_width 0

# single_window_margin_width -1

# window_padding_width 0

# placement_strategy center

# active_border_color #00ff00
# inactive_border_color #cccccc
# bell_border_color #ff5a00

# inactive_text_alpha 1.0

# hide_window_decorations no

# resize_debounce_time 0.1
# resize_draw_strategy static
# resize_in_steps no

# confirm_os_window_close 0

# tab_activity_symbol none
# tab_bar_background none
# tab_bar_edge bottom
# tab_bar_margin_height 0.0 0.0
# tab_bar_margin_width 0.0
# tab_bar_min_tabs 2
# tab_bar_style fade
# tab_fade 0.25 0.5 0.75 1
# tab_powerline_style angled
# tab_separator " â”‡"
# tab_switch_strategy previous
# tab_title_template "{title}"

# active_tab_background   #eee
# active_tab_font_style   bold-italic
# active_tab_foreground   #000
# active_tab_title_template none

# inactive_tab_background #999
# inactive_tab_font_style normal
# inactive_tab_foreground #444

# foreground #dddddd
# background #000000

# background_opacity 1.0
# background_image none
# background_image_layout tiled
# background_image_linear no
# dynamic_background_opacity no
# background_tint 0.0

# dim_opacity 0.75

# selection_foreground #000000
# selection_background #fffacd

# color0 #000000
# color8 #767676

# color1 #cc0403
# color9 #f2201f

# color2  #19cb00
# color10 #23fd00

# color3  #cecb00
# color11 #fffd00

# color4  #0d73cc
# color12 #1a8fff

# color5  #cb1ed1
# color13 #fd28ff

# color6  #0dcdcd
# color14 #14ffff

# color7  #dddddd
# color15 #ffffff

# mark1_foreground black
# mark1_background #98d3cb

# mark2_foreground black
# mark2_background #f2dcd3

# mark3_foreground black
# mark3_background #f274bc

# shell .
# editor .

# close_on_child_death no

# allow_remote_control no
# listen_on none

# env

update_check_interval 0

# startup_session none

# clipboard_control write-clipboard write-primary
# clipboard_max_size 64

# allow_hyperlinks yes

# term xterm-kitty

# macos_custom_beam_cursor no
# macos_hide_from_tasks no
# macos_option_as_alt no
# macos_quit_when_last_window_closed no
# macos_show_window_title_in all
# macos_thicken_font 0
# macos_titlebar_color system
# macos_traditional_fullscreen no
# macos_window_resizable yes

#: Keys are identified simply by their lowercase unicode characters.
#: For example: ``a`` for the A key, ``[`` for the left square bracket
#: key, etc. For functional keys, such as ``Enter or Escape`` the
#: names are present at https://sw.kovidgoyal.net/kitty/keyboard-
#: protocol/#functional-key-definitions. For a list of modifier names,
#: see: GLFW mods <https://www.glfw.org/docs/latest/group__mods.html>

#: On Linux you can also use XKB key names to bind keys that are not
#: supported by GLFW. See XKB keys
#: <https://github.com/xkbcommon/libxkbcommon/blob/master/include/xkbcommon/xkbcommon-
#: keysyms.h> for a list of key names. The name to use is the part
#: after the XKB_KEY_ prefix. Note that you can only use an XKB key
#: name for keys that are not known as GLFW keys.

#: Finally, you can use raw system key codes to map keys, again only
#: for keys that are not known as GLFW keys. To see the system key
#: code for a key, start kitty with the kitty --debug-input option.
#: Then kitty will output some debug text for every key event. In that
#: text look for ``native_code`` the value of that becomes the key
#: name in the shortcut. For example:

#: .. code-block:: none

#:     on_key_input: glfw key: 65 native_code: 0x61 action: PRESS mods: 0x0 text: 'a'

#: Here, the key name for the A key is 0x61 and you can use it with::

#:     map ctrl+0x61 something

#: to map ctrl+a to something.

#: You can use the special action no_op to unmap a keyboard shortcut
#: that is assigned in the default configuration::

#:     map kitty_mod+space no_op

#: You can combine multiple actions to be triggered by a single
#: shortcut, using the syntax below::

#:     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: For example::

#:     map kitty_mod+e combine : new_window : next_layout

#: this will create a new window and switch to the next available
#: layout

#: You can use multi-key shortcuts using the syntax shown below::

#:     map key1>key2>key3 action

#: For example::

#:     map ctrl+f>2 set_font_size 20

#: The full list of actions that can be mapped to key presses is
#: available here </actions>.

# kitty_mod ctrl+shift

#: The value of kitty_mod is used as the modifier for all default
#: shortcuts, you can change it in your kitty.conf to change the
#: modifiers for all the default shortcuts.

# clear_all_shortcuts no

#: You can have kitty remove all shortcut definition seen up to this
#: point. Useful, for instance, to remove the default shortcuts.

# kitten_alias hints hints --hints-offset=0

#: You can create aliases for kitten names, this allows overriding the
#: defaults for kitten options and can also be used to shorten
#: repeated mappings of the same kitten with a specific group of
#: options. For example, the above alias changes the default value of
#: kitty +kitten hints --hints-offset to zero for all mappings,
#: including the builtin ones.

# map kitty_mod+c copy_to_clipboard

# map kitty_mod+v paste_from_clipboard
# map kitty_mod+s paste_from_selection
# map kitty_mod+o pass_selection_to_program

# map kitty_mod+up        scroll_line_up
# map kitty_mod+down      scroll_line_down
# map kitty_mod+page_up   scroll_page_up
# map kitty_mod+page_down scroll_page_down
# map kitty_mod+home      scroll_home
# map kitty_mod+end       scroll_end
# map kitty_mod+h         show_scrollback

# map kitty_mod+enter new_window

#: You can open a new window running an arbitrary program, for
#: example::

#:     map kitty_mod+y      launch mutt

#: You can open a new window with the current working directory set to
#: the working directory of the current window using::

#:     map ctrl+alt+enter    launch --cwd=current

#: You can open a new window that is allowed to control kitty via the
#: kitty remote control facility by prefixing the command line with @.
#: Any programs running in that window will be allowed to control
#: kitty. For example::

#:     map ctrl+enter launch --allow-remote-control some_program

#: You can open a new window next to the currently active window or as
#: the first window, with::

#:     map ctrl+n launch --location=neighbor some_program
#:     map ctrl+f launch --location=first some_program

#: For more details, see launch.

# map kitty_mod+n new_os_window

#: Works like new_window above, except that it opens a top level OS
#: kitty window. In particular you can use new_os_window_with_cwd to
#: open a window with the current working directory.

# map kitty_mod+w close_window
# map kitty_mod+] next_window
# map kitty_mod+[ previous_window
# map kitty_mod+f move_window_forward
# map kitty_mod+b move_window_backward
# map kitty_mod+` move_window_to_top
# map kitty_mod+r start_resizing_window
# map kitty_mod+1 first_window
# map kitty_mod+2 second_window
# map kitty_mod+3 third_window
# map kitty_mod+4 fourth_window
# map kitty_mod+5 fifth_window
# map kitty_mod+6 sixth_window
# map kitty_mod+7 seventh_window
# map kitty_mod+8 eighth_window
# map kitty_mod+9 ninth_window
# map kitty_mod+0 tenth_window

# map kitty_mod+right next_tab
# map kitty_mod+left  previous_tab
# map kitty_mod+t     new_tab
# map kitty_mod+q     close_tab
# map shift+cmd+w     close_os_window
# map kitty_mod+.     move_tab_forward
# map kitty_mod+,     move_tab_backward
# map kitty_mod+alt+t set_tab_title

#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab, and any number larger than the last tab being the last tab::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and use
#: new_tab_with_cwd. Finally, if you want the new tab to open next to
#: the current tab rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]

# map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout

#: There is also a toggle layout function that switches to the named
#: layout or back to the previous layout if in the named layout.
#: Useful to temporarily "zoom" the active window by switching to the
#: stack layout::

#:     map ctrl+alt+z toggle_layout stack

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

# map kitty_mod+equal     change_font_size all +2.0
# map kitty_mod+minus     change_font_size all -2.0
# map kitty_mod+backspace change_font_size all 0

#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

# map kitty_mod+e open_url_with_hints

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.

# map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

# map kitty_mod+p>shift+f kitten hints --type path

#: Select a path/filename and open it with the default open program.

# map kitty_mod+p>l kitten hints --type line --program -

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1

# map kitty_mod+p>w kitten hints --type word --program -

#: Select words and insert into terminal.

# map kitty_mod+p>h kitten hints --type hash --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits

# map kitty_mod+p>n kitten hints --type linenum

#: Select something that looks like filename:linenum and open it in
#: vim at the specified line number.

# map kitty_mod+p>y kitten hints --type hyperlink

#: Select a hyperlink (i.e. a URL that has been marked as such by the
#: terminal program, for example, by ls --hyperlink=auto).


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.

# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+f10    toggle_maximized
# map kitty_mod+u      kitten unicode_input
# map kitty_mod+f2     edit_config_file
# map kitty_mod+escape kitty_shell window

#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

# map kitty_mod+a>m    set_background_opacity +0.1
# map kitty_mod+a>l    set_background_opacity -0.1
# map kitty_mod+a>1    set_background_opacity 1
# map kitty_mod+a>d    set_background_opacity default
# map kitty_mod+delete clear_terminal reset active

#: You can create shortcuts to clear/reset the terminal. For example::

#:     # Reset the terminal
#:     map kitty_mod+f9 clear_terminal reset active
#:     # Clear the terminal screen by erasing all contents
#:     map kitty_mod+f10 clear_terminal clear active
#:     # Clear the terminal scrollback by erasing it
#:     map kitty_mod+f11 clear_terminal scrollback active
#:     # Scroll the contents of the screen into the scrollback
#:     map kitty_mod+f12 clear_terminal scroll active

#: If you want to operate on all windows instead of just the current
#: one, use all instead of active.

#: It is also possible to remap Ctrl+L to both scroll the current
#: screen contents into the scrollback buffer and clear the screen,
#: instead of just clearing the screen, for example, for ZSH add the
#: following to ~/.zshrc:

#: .. code-block:: sh

#:     scroll-and-clear-screen() {
#:         printf '\n%.0s' {1..$LINES}
#:         zle clear-screen
#:     }
#:     zle -N scroll-and-clear-screen
#:     bindkey '^l' scroll-and-clear-screen

# map kitty_mod+f5 load_config_file

#: Reload kitty.conf, applying any changes since the last time it was
#: loaded. Note that a handful of settings cannot be dynamically
#: changed and require a full restart of kitty.  You can also map a
#: keybinding to load a different config file, for example::

#:     map f5 load_config /path/to/alternative/kitty.conf

#: Note that all setting from the original kitty.conf are discarded,
#: in other words the new conf settings *replace* the old ones.

# map kitty_mod+f6 debug_config

#: Show details about exactly what configuration kitty is running with
#: and its host environment. Useful for debugging issues.


#: You can tell kitty to send arbitrary (UTF-8) encoded text to the
#: client program when pressing specified shortcut keys. For example::

#:     map ctrl+alt+a send_text all Special text

#: This will send "Special text" when you press the ctrl+alt+a key
#: combination.  The text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as UTF-8 text). The first argument to send_text is the
#: keyboard modes in which to activate the shortcut. The possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  The special keyword all means all modes. The
#: modes normal and application refer to the DECCKM cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: Another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the Home key)::

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH

include ~/.config/kitty/themes/gruvbox_dark_hard.conf
